// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Analytics models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Keep for credentials provider
  accounts      Account[]
  sessions      Session[]
  websites      Website[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@map("users")
}

model Website {
  id        String   @id @default(cuid())
  name      String
  domain    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  events    Event[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("websites")
}

model Event {
  id           String   @id @default(cuid())
  website      Website  @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  websiteId    String
  sessionId    String
  eventType    String   // 'pageview' or 'custom'
  eventName    String   // e.g., '/', '/about', 'signup-click'
  path         String?
  referrer     String?
  userAgent    String?
  screenWidth  Int?
  screenHeight Int?
  country      String?
  city         String?
  ip           String?
  createdAt    DateTime @default(now())
  
  @@map("events")
}
